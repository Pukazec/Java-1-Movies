/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.leoskvorc.view.user;

import hr.leoskvorc.dal.MovieRepository;
import hr.leoskvorc.dal.RepositoryFactory;
import hr.leoskvorc.model.Movie;
import hr.leoskvorc.model.Person;
import hr.leoskvorc.model.PersonTransferable;
import hr.leoskvorc.utils.FileUtils;
import hr.leoskvorc.utils.IconUtils;
import hr.leoskvorc.utils.MessageUtils;
import hr.leoskvorc.view.admin.DataManagementPanel;
import hr.leoskvorc.view.model.MovieTableModel;
import hr.leoskvorc.view.model.PanelMovieModel;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import javax.swing.text.JTextComponent;

/**
 *
 * @author lskvo
 */
public class EditMoviePanel extends PanelMovieModel {

    private List<JTextComponent> validationFields;
    private JSpinner spinner;
    private List<JLabel> errorLabels;

    private static final String DIR = "assets";
    private static final String NO_IMG = "assets\\no_image.png";

    private final Set<Person> actorsSet = new TreeSet<>();

    private MovieRepository repository;
    private MovieTableModel movieTableModel;
    private DefaultListModel<Person> actorsModel;
    private DefaultListModel<Person> personsModel;

    private Movie selectedMovie;

    /**
     * Creates new form user
     */
    public EditMoviePanel() {
        initComponents();
        super.setRepository(repository);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblIcon = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtTitle = new javax.swing.JTextField();
        txtLink = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        lblErrorOriginalName = new javax.swing.JLabel();
        lblErrorLink = new javax.swing.JLabel();
        lblErrorDescription = new javax.swing.JLabel();
        lblErrorLength = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtPicturePath = new javax.swing.JTextField();
        btnChangePicutre = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMovies = new javax.swing.JTable();
        lblErrorPicturePath = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtOriginalName = new javax.swing.JTextField();
        lblErrorTitle = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtDirector = new javax.swing.JTextField();
        lblErrorDirector = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        lblErrorActors = new javax.swing.JLabel();
        txtInCinemaFrom = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        lblErrorInCinemaFrom = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txtPublished = new javax.swing.JTextField();
        lblErrorPublished = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        txtGenres = new javax.swing.JTextField();
        lblErrorGenres = new javax.swing.JLabel();
        numLength = new javax.swing.JSpinner();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        lsPersons = new javax.swing.JList<>();
        btnCancel = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(50, 50));
        setPreferredSize(new java.awt.Dimension(1800, 910));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(null);

        lblIcon.setBackground(new java.awt.Color(255, 255, 255));
        lblIcon.setIcon(new javax.swing.ImageIcon("C:\\Users\\lskvo\\OneDrive\\Radna povr≈°ina\\4 Semestar\\Programiranje u Javi 1\\Projekt\\Java1Project\\assets\\no_image.png")); // NOI18N
        add(lblIcon);
        lblIcon.setBounds(1190, 40, 500, 342);

        jLabel2.setText("Description");
        add(jLabel2);
        jLabel2.setBounds(10, 150, 100, 30);

        jLabel3.setText("Link");
        add(jLabel3);
        jLabel3.setBounds(10, 80, 100, 30);

        jLabel4.setText("Length");
        add(jLabel4);
        jLabel4.setBounds(10, 380, 90, 30);
        add(txtTitle);
        txtTitle.setBounds(10, 40, 260, 30);
        add(txtLink);
        txtLink.setBounds(10, 110, 550, 30);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txtDescription.setColumns(20);
        txtDescription.setLineWrap(true);
        txtDescription.setRows(5);
        txtDescription.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txtDescription);

        add(jScrollPane1);
        jScrollPane1.setBounds(10, 180, 550, 200);

        lblErrorOriginalName.setForeground(new java.awt.Color(255, 0, 0));
        add(lblErrorOriginalName);
        lblErrorOriginalName.setBounds(570, 40, 15, 30);

        lblErrorLink.setForeground(new java.awt.Color(255, 0, 0));
        add(lblErrorLink);
        lblErrorLink.setBounds(570, 110, 15, 30);

        lblErrorDescription.setForeground(new java.awt.Color(255, 0, 0));
        add(lblErrorDescription);
        lblErrorDescription.setBounds(570, 180, 15, 30);

        lblErrorLength.setForeground(new java.awt.Color(255, 0, 0));
        add(lblErrorLength);
        lblErrorLength.setBounds(90, 410, 15, 30);

        jLabel9.setText("Title");
        add(jLabel9);
        jLabel9.setBounds(10, 10, 100, 30);

        txtPicturePath.setEnabled(false);
        add(txtPicturePath);
        txtPicturePath.setBounds(1190, 390, 400, 30);

        btnChangePicutre.setText("Change image");
        btnChangePicutre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangePicutreActionPerformed(evt);
            }
        });
        add(btnChangePicutre);
        btnChangePicutre.setBounds(1610, 390, 110, 30);

        btnUpdate.setBackground(new java.awt.Color(194, 179, 94));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        add(btnUpdate);
        btnUpdate.setBounds(150, 520, 130, 50);

        btnAdd.setBackground(new java.awt.Color(51, 81, 8));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        add(btnAdd);
        btnAdd.setBounds(10, 520, 130, 50);

        btnDelete.setBackground(new java.awt.Color(91, 0, 0));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete);
        btnDelete.setBounds(290, 520, 130, 50);

        tblMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMoviesMouseClicked(evt);
            }
        });
        tblMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblMoviesKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tblMovies);

        add(jScrollPane2);
        jScrollPane2.setBounds(10, 580, 1780, 320);

        lblErrorPicturePath.setForeground(new java.awt.Color(255, 0, 0));
        add(lblErrorPicturePath);
        lblErrorPicturePath.setBounds(1700, 350, 15, 30);

        jLabel11.setText("Original name");
        add(jLabel11);
        jLabel11.setBounds(300, 10, 170, 30);
        add(txtOriginalName);
        txtOriginalName.setBounds(300, 40, 260, 30);

        lblErrorTitle.setForeground(new java.awt.Color(255, 0, 0));
        add(lblErrorTitle);
        lblErrorTitle.setBounds(280, 40, 15, 30);

        jLabel13.setText("Director");
        add(jLabel13);
        jLabel13.setBounds(10, 450, 100, 30);
        add(txtDirector);
        txtDirector.setBounds(10, 480, 170, 30);

        lblErrorDirector.setForeground(new java.awt.Color(255, 0, 0));
        add(lblErrorDirector);
        lblErrorDirector.setBounds(190, 480, 15, 30);

        jLabel15.setText("All people");
        add(jLabel15);
        jLabel15.setBounds(870, 10, 100, 30);

        lblErrorActors.setForeground(new java.awt.Color(255, 0, 0));
        add(lblErrorActors);
        lblErrorActors.setBounds(840, 10, 15, 30);
        add(txtInCinemaFrom);
        txtInCinemaFrom.setBounds(110, 410, 120, 30);

        jLabel17.setText("In cinema from");
        add(jLabel17);
        jLabel17.setBounds(110, 380, 100, 30);

        lblErrorInCinemaFrom.setForeground(new java.awt.Color(255, 0, 0));
        add(lblErrorInCinemaFrom);
        lblErrorInCinemaFrom.setBounds(240, 410, 15, 30);

        jLabel19.setText("Published (yyyy-MM-ddThh:mm:ss)");
        add(jLabel19);
        jLabel19.setBounds(260, 380, 210, 30);
        add(txtPublished);
        txtPublished.setBounds(260, 410, 300, 30);

        lblErrorPublished.setForeground(new java.awt.Color(255, 0, 0));
        add(lblErrorPublished);
        lblErrorPublished.setBounds(570, 410, 15, 30);

        jLabel21.setText("Genres");
        add(jLabel21);
        jLabel21.setBounds(210, 450, 100, 30);
        add(txtGenres);
        txtGenres.setBounds(210, 480, 350, 30);

        lblErrorGenres.setForeground(new java.awt.Color(255, 0, 0));
        add(lblErrorGenres);
        lblErrorGenres.setBounds(570, 480, 15, 30);
        add(numLength);
        numLength.setBounds(10, 410, 70, 30);

        jScrollPane3.setViewportView(lsActors);

        add(jScrollPane3);
        jScrollPane3.setBounds(610, 40, 250, 530);

        jScrollPane4.setViewportView(lsPersons);

        add(jScrollPane4);
        jScrollPane4.setBounds(870, 40, 220, 530);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        add(btnCancel);
        btnCancel.setBounds(430, 520, 130, 50);

        jLabel16.setText("Actors");
        add(jLabel16);
        jLabel16.setBounds(610, 10, 100, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please select movie to delete.");
            return;
        }
        if (MessageUtils.showConfirmDialog(
                "Delete article",
                "Do you really want to delete movie?") == JOptionPane.YES_OPTION) {
            try {
                if (selectedMovie.getPicturePath() != null) {
                    Files.deleteIfExists(Paths.get(selectedMovie.getPicturePath()));
                }
                repository.deleteMovie(selectedMovie.getId());
                movieTableModel.setMovies(repository.selectMovies());

                clearForm();
                initTable();
            } catch (Exception ex) {
                Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to delete movie!");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblMoviesKeyReleased
        showMovie();
    }//GEN-LAST:event_tblMoviesKeyReleased

    private void tblMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMoviesMouseClicked
        showMovie();
    }//GEN-LAST:event_tblMoviesMouseClicked

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (formValid()) {
            try {
                String localPicturePath = uploadPicture();

                Movie movie = new Movie(
                        txtTitle.getText().trim(),
                        txtDescription.getText().trim(),
                        txtOriginalName.getText().trim(),
                        txtLink.getText().trim(),
                        new Person(txtDirector.getText().trim()),
                        (int) numLength.getValue(),
                        txtGenres.getText().trim(),
                        localPicturePath,
                        txtInCinemaFrom.getText().trim(),
                        LocalDateTime.parse(txtPublished.getText().trim(), Movie.DATE_FORMATTER)
                );

                movie.setActors(actorsSet);

                repository.createMovie(movie);
                movieTableModel.setMovies(repository.selectMovies());
                initTable();
                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to create movie!");
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please select movie to update.");
            return;
        }
        if (formValid()) {
            try {
                if (!txtPicturePath.getText().trim().equals(selectedMovie.getPicturePath())) {
                    if (selectedMovie.getPicturePath() != null) {
                        Files.deleteIfExists(Paths.get(selectedMovie.getPicturePath()));
                    }
                    String localPicturePath = uploadPicture();
                    selectedMovie.setPicturePath(localPicturePath);
                } else {
                    selectedMovie.setPicturePath(txtPicturePath.getText().trim());
                }

                selectedMovie.setTitle(txtTitle.getText().trim());
                selectedMovie.setDescription(txtDescription.getText().trim());
                selectedMovie.setOriginalName(txtOriginalName.getText().trim());
                selectedMovie.setLink(txtLink.getText().trim());
                Optional<Person> director = repository.selectPerson(selectedMovie.getDirector().getId());
                director.get().setName(txtDirector.getText().trim());
                selectedMovie.setDirector(director.get());
                selectedMovie.setLength((int) numLength.getValue());
                selectedMovie.setGenre(txtGenres.getText().trim());
                selectedMovie.setInCinemaFrom(txtInCinemaFrom.getText().trim());
                selectedMovie.setPublished(LocalDateTime.parse(txtPublished.getText().trim(), Movie.DATE_FORMATTER));

                selectedMovie.setActors(actorsSet);

                repository.updateMovie(selectedMovie.getId(), selectedMovie);
                movieTableModel.setMovies(repository.selectMovies());
                initTable();
                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to update movie!");
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnChangePicutreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangePicutreActionPerformed
        Optional<File> file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (!file.isPresent()) {
            return;
        }
        txtPicturePath.setText(file.get().getAbsolutePath());
        setIcon(lblIcon, file.get());
    }//GEN-LAST:event_btnChangePicutreActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        clearForm();
    }//GEN-LAST:event_btnCancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnChangePicutre;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblErrorActors;
    private javax.swing.JLabel lblErrorDescription;
    private javax.swing.JLabel lblErrorDirector;
    private javax.swing.JLabel lblErrorGenres;
    private javax.swing.JLabel lblErrorInCinemaFrom;
    private javax.swing.JLabel lblErrorLength;
    private javax.swing.JLabel lblErrorLink;
    private javax.swing.JLabel lblErrorOriginalName;
    private javax.swing.JLabel lblErrorPicturePath;
    private javax.swing.JLabel lblErrorPublished;
    private javax.swing.JLabel lblErrorTitle;
    private javax.swing.JLabel lblIcon;
    private javax.swing.JList<Person> lsActors;
    private javax.swing.JList<Person> lsPersons;
    private javax.swing.JSpinner numLength;
    private javax.swing.JTable tblMovies;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtDirector;
    private javax.swing.JTextField txtGenres;
    private javax.swing.JTextField txtInCinemaFrom;
    private javax.swing.JTextField txtLink;
    private javax.swing.JTextField txtOriginalName;
    private javax.swing.JTextField txtPicturePath;
    private javax.swing.JTextField txtPublished;
    private javax.swing.JTextField txtTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            numLength.setValue(100);
            initValidation();
            initRepository();
            initTable();
            initLists();
            initDragNDrop();
        } catch (Exception ex) {
            Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initate the form.");
            System.exit(1);
        }
    }

    private void initValidation() {
        validationFields = Arrays.asList(txtTitle, txtDescription, txtOriginalName, txtLink, txtDirector, txtGenres, txtPicturePath, txtInCinemaFrom, txtPublished);
        spinner = numLength;
        errorLabels = Arrays.asList(lblErrorTitle, lblErrorDescription, lblErrorOriginalName, lblErrorLink, lblErrorDirector, lblErrorGenres, lblErrorPicturePath, lblErrorInCinemaFrom, lblErrorPublished, lblErrorLength);
    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getMovieRepository();
    }

    private void initTable() throws Exception {
        tblMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblMovies.setAutoCreateRowSorter(true);
        tblMovies.setRowHeight(25);
        movieTableModel = new MovieTableModel(repository.selectMovies());
        tblMovies.setModel(movieTableModel);
    }

    private void initLists() {
        actorsModel = new DefaultListModel<>();
        personsModel = new DefaultListModel<>();
        loadPersons();
    }

    private void initDragNDrop() {
        lsPersons.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsPersons.setDragEnabled(true);
        lsPersons.setTransferHandler(new ExportTransferHandler());

        lsActors.setDropMode(DropMode.ON);
        lsActors.setTransferHandler(new ImportTransferHandler());
    }

    private void loadPersons() {

        try {
            List<Person> persons = repository.selectPersons();
            personsModel.clear();

            persons.forEach(personsModel::addElement);

            lsPersons.setModel(personsModel);
        } catch (Exception ex) {
            Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to load persons.");
        }
    }

    private void showMovie() {
        clearForm();
        int selectedRow = tblMovies.getSelectedRow();
        int rowIndex = tblMovies.convertRowIndexToModel(selectedRow);
        int selectedMovieId = (int) movieTableModel.getValueAt(rowIndex, 0);

        try {
            Optional<Movie> optMovie = repository.selectMovie(selectedMovieId);
            if (optMovie.isPresent()) {
                selectedMovie = optMovie.get();
                fillForm(selectedMovie);
            }
        } catch (Exception ex) {
            Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to show movie!");
        }
    }

    private void clearForm() {
        validationFields.forEach(e -> e.setText(""));
        spinner.setValue(100);
        errorLabels.forEach(e -> e.setText(""));

        actorsSet.clear();
        actorsModel.clear();
        lsActors.setModel(actorsModel);

        
        setIcon(lblIcon, new File(NO_IMG));
        selectedMovie = null;
    }

    private void fillForm(Movie movie) {
        if (movie.getPicturePath() != null && Files.exists(Paths.get(movie.getPicturePath()))) {
            txtPicturePath.setText(movie.getPicturePath());
            setIcon(lblIcon, new File(movie.getPicturePath()));
        }

        txtTitle.setText(movie.getTitle());
        txtDescription.setText(movie.getDescription());
        txtOriginalName.setText(movie.getOriginalName());
        txtLink.setText(movie.getLink());
        txtDirector.setText(movie.getDirector().getName());
        numLength.setValue(movie.getLength());
        txtGenres.setText(movie.getGenre());
        txtInCinemaFrom.setText(movie.getInCinemaFrom());
        txtPublished.setText(movie.getPublished().format(Movie.DATE_FORMATTER));

        loadPersons();

        actorsModel.clear();
        for (Person actor : movie.getActors()) {
            actorsModel.addElement(actor);
            actorsSet.add(actor);
        }
        lsActors.setModel(actorsModel);

    }

    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file.toString(), label.getWidth(), label.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to set icon!");
        }
    }

    private boolean formValid() {
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "X" : "");

            if ("Date".equals(validationFields.get(i).getName())) {
                try {
                    LocalDateTime.parse(validationFields.get(i).getText().trim(), Movie.DATE_FORMATTER);
                    errorLabels.get(i).setText("");
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setText("X");
                }
            }
        }

        return ok;
    }

    private String uploadPicture() throws IOException {
        String picturePath = txtPicturePath.getText().trim();
        String ext = picturePath.substring(picturePath.lastIndexOf("."));
        String pictureName = UUID.randomUUID() + ext;
        String localPicturePath = DIR + File.separator + pictureName;
        FileUtils.copy(picturePath, localPicturePath);
        return localPicturePath;
    }

    private class ImportTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

        @Override
        public boolean importData(TransferSupport support) {
            Transferable transferable = support.getTransferable();

            try {
                Person data = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);
                if (actorsSet.add(data)) {
                    loadActors();
                    return true;
                } else {
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            return false;
        }

        public ImportTransferHandler() {
        }

    }

    private void loadActors() {
        actorsModel.clear();
        actorsSet.forEach(actorsModel::addElement);
        lsActors.setModel(actorsModel);
    }

    private class ExportTransferHandler extends TransferHandler {

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new PersonTransferable(lsPersons.getSelectedValue());
        }

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }
    }
    
    public List<Movie> getMovies(){
        try {
            return repository.selectMovies();
        } catch (Exception ex) {
            Logger.getLogger(DataManagementPanel.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }
}
